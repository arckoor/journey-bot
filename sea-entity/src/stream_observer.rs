//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "stream_observer")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub guild_id: i64,
    pub channel_id: i64,
    pub game_id: String,
    pub game_name: String,
    #[sea_orm(column_type = "Text")]
    pub template: String,
    #[sea_orm(column_type = "Text")]
    pub end_template: String,
    pub blacklist: Vec<String>,
    pub auto_blacklist_sheet_id: Option<String>,
    pub auto_blacklist_column_name: Option<String>,
    pub auto_blacklist: Vec<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::known_stream::Entity")]
    KnownStream,
    #[sea_orm(has_many = "super::posted_stream::Entity")]
    PostedStream,
}

impl Related<super::known_stream::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KnownStream.def()
    }
}

impl Related<super::posted_stream::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostedStream.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
