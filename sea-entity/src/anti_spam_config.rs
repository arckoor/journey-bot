//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use super::sea_orm_active_enums::Punishment;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "anti_spam_config")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub punishment: Punishment,
    pub timeout_duration: i32,
    pub max_messages: Vec<i32>,
    pub similar_message_threshold: Vec<f64>,
    #[sea_orm(column_type = "Double")]
    pub similar_message_re_punish_threshold: f64,
    pub time_frame: i32,
    pub clean_user: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::punished_message::Entity")]
    PunishedMessage,
}

impl Related<super::punished_message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PunishedMessage.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
